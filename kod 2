#include <iostream>
#include <vector>
using namespace std;

// Funkcja do sprawdzania, czy podciąg jest symetryczny względem dwójek
bool sym2(const vector<int>& podciag, int indeksDwojki) {
    int lewa = indeksDwojki - 1;
    int prawa = indeksDwojki + 1;

    // Sprawdzamy, czy elementy po obu stronach dwójki są symetryczne
    while (lewa >= 0 && prawa < podciag.size()) {
        if (podciag[lewa] != podciag[prawa]) {
            return false; // Podciąg nie jest symetryczny
        }
        lewa--;
        prawa++;
    }
    return true; // Podciąg jest symetryczny względem dwójek
}

int main() {
    vector<int> ciag = {0, 1, 2, 1, 1, 0, 2, 0, 1, 1, 1, 1, 2, 0};
    vector<vector<int>> wyniki;

    // Szukamy dwójek w ciągu
    for (int i = 0; i < ciag.size(); ++i) {
        if (ciag[i] == 2) {
            // Sprawdzamy podciągi zawierające tę dwójkę
            int poczatek = i, koniec = i;

            // Przesuwamy początek w lewo i koniec w prawo, aby objąć możliwy podciąg symetryczny
            while (poczatek >= 0 && koniec < ciag.size()) {
                vector<int> podciag(ciag.begin() + poczatek, ciag.begin() + koniec + 1);

                // Jeśli podciąg jest symetryczny względem dwójek, dodajemy go do wyników
                if (sym2(podciag, i - poczatek)) {
                    wyniki.push_back(podciag);
                }

                // Rozszerzamy zakres podciągu
                poczatek--;
                koniec++;
            }
        }
    }

    // Wyświetlamy wyniki
    if (wyniki.empty()) {
        cout << "Brak elementów spełniających zadane kryteria." << endl;
    } else {
        for (const auto& podciag : wyniki) {
            cout << "[";
            for (size_t i = 0; i < podciag.size(); ++i) {
                cout << podciag[i];
                if (i != podciag.size() - 1) cout << ", ";
            }
            cout << "]" << endl;
        }
    }

    return 0;
}
